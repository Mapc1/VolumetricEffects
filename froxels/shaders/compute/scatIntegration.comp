#version 430

#define TEX_DIMS ivec3(160,90,64)

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

// Output texture
uniform writeonly image3D INTEGRATION_UNIT;

uniform sampler3D SCATTERING_UNIT;

// To get the world position of the froxel
uniform float NEAR;
uniform float FAR;

uniform int VOL_ACTIVE;

float sliceDist(int slice) {
    return NEAR * pow(FAR/NEAR, (float(slice)+0.5) / float(TEX_DIMS.z));
}


float sliceThickness(int slice) {
    return abs(sliceDist(slice+1) - sliceDist(slice));
}


vec4 accumulateScattering(int z, vec3 accumScattering, float accumTransmittance, vec3 sliceScattering, float sliceExt){
    float thickness = sliceThickness(z);
    float sliceTransmittance = exp(-sliceExt*thickness);

    vec3 sliceLightIntegral = sliceScattering * (1.0 - sliceTransmittance) / sliceExt;
    accumScattering += sliceLightIntegral * accumTransmittance;
    accumTransmittance *= sliceTransmittance;

    return vec4(accumScattering,accumTransmittance);
}


void main() {
    if (VOL_ACTIVE == 1) {
        return;
    }
    
    vec4 accumScattering = vec4(0.0,0.0,0.0,1.0);
    for (int i = 0; i < TEX_DIMS.z; i++) {
        ivec3 storeLoc = ivec3(gl_GlobalInvocationID.xy, i);
        float thickness = sliceThickness(storeLoc.z);

        vec4 scatExtinction = texelFetch(SCATTERING_UNIT, storeLoc, 0);
        vec3 froxelScattering = scatExtinction.rgb;
        float froxelExtinction = scatExtinction.a;

        accumScattering = accumulateScattering(i, accumScattering.rgb, accumScattering.a, froxelScattering, froxelExtinction);

        imageStore(INTEGRATION_UNIT, storeLoc, accumScattering);
    }
}