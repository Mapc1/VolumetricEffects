#version 430

#define TEX_DIMS ivec3(160,90,64)

#define EMISS vec3(0.0)

#define PI 3.1415926538

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

// Output textures
uniform writeonly image3D EMISS_PHASE_UNIT;
uniform writeonly image3D SCAT_EXTINCTION_UNIT;

// To get the world position of the froxel
uniform mat4 INV_VIEW_MAT;
uniform mat4 INV_PROJ_MAT;

// To get the angle for the phase function
uniform vec4 CAM_POS;
uniform vec4 LIGHT_DIR;

uniform float NEAR;
uniform float FAR;

// Variable parameters
uniform float ANISOTROPY;
uniform vec3 SCATTERING;
uniform float EXTINCTION;


vec3 id_to_world(ivec3 id, float n, float f, float depth_power, mat4 inv_vp);


float camLightAngle(vec4 worldPos) {
    vec4 froxelCamDir = normalize(CAM_POS - worldPos);
    vec4 froxelLightDir = normalize(-LIGHT_DIR);

    return acos(dot(froxelLightDir, froxelCamDir));
}


float henyeyGreenstein(vec4 worldPos, float g) {
    vec4 froxelCamDir = normalize(CAM_POS - worldPos);
    vec4 froxelLightDir = normalize(LIGHT_DIR);

    float cosAngle = dot(froxelCamDir, froxelLightDir);
    float denom = 4*PI * pow((1+g*g - 2*g*cosAngle), 3/2);
    return (1-g*g) / denom;
}


void main() {
    ivec3 storeLoc = ivec3(gl_GlobalInvocationID);
    vec4 worldPos = vec4(id_to_world(storeLoc, NEAR, FAR, 0.0, INV_VIEW_MAT * INV_PROJ_MAT), 1.0);

    float phase = henyeyGreenstein(worldPos, ANISOTROPY);

    imageStore(EMISS_PHASE_UNIT, storeLoc, vec4(EMISS,phase));
    imageStore(SCAT_EXTINCTION_UNIT, storeLoc, vec4(SCATTERING,EXTINCTION));
}